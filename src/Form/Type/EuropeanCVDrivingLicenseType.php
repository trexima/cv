<?php

namespace Trexima\EuropeanCvBundle\Form\Type;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\CallbackTransformer;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\Form\FormView;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Validator\Constraints as Assert;
use Trexima\EuropeanCvBundle\Entity\Enum\DrivingLicenseEnum;
use Trexima\EuropeanCvBundle\Entity\EuropeanCVDrivingLicense;

use function Symfony\Component\Translation\t;

class EuropeanCVDrivingLicenseType extends AbstractType
{
    /**
     * {@inheritdoc}
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $drivingLicense = $options['driving_license'];

        $builder->add('drivingLicense', CheckboxType::class, [
            'label' => $drivingLicense?->getTitle() ?: false,
            'required' => false,
            'attr' => [
                'data-icon-class' => $drivingLicense?->getIconClass(),
            ],
            'toggle' => [
                [
                    'key' => '1',
                    'value' => [
                        '#driving_license_europeanCV_drivingLicenses_driving_license_' . $drivingLicense->value . '_distanceTraveled',
                        '#driving_license_europeanCV_drivingLicenses_driving_license_' . $drivingLicense->value . '_activeDriver'
                    ]
                ]
            ]
        ])
        ->add('distanceTraveled', null, [
            'label' => false,
            'required' => false, 'attr' => [
                'placeholder' => t('trexima_european_cv.form_label.driving_license_distance_traveled_placeholder', [], 'trexima_european_cv')
            ],
            'constraints' => [
                new Assert\Range(min: 0, max: 2 ** 32 - 1),
            ],
        ])
        ->add('activeDriver', CheckboxType::class, [
            'label' => t('trexima_european_cv.form_label.driving_license_active_driver_label', [], 'trexima_european_cv'),
            'required' => false,
        ])
        ;

        /**
         * Return DrivingLicense entity if checkbox is checked instead bollean
         */
        $builder->get('drivingLicense')->addModelTransformer(new CallbackTransformer(
            // Value is already filled if array with driver license data is recieved
            fn($isChecked) => $isChecked ? true : $isChecked,
            function ($isChecked) use ($drivingLicense) {
                if ($isChecked) {
                    // Field is checked, save entity to parent entity
                    foreach (DrivingLicenseEnum::cases() as $case) {
                        if ($case->value === $drivingLicense->value) {
                            return $case;
                        }
                    }
                }

                // Field isn't checked, return null to parent entity
                return null;
            }
        ));
    }

    public function buildView(FormView $view, FormInterface $form, array $options)
    {
        parent::buildView($view, $form, $options); // TODO: Change the autogenerated stub

        $view->vars['driving_license'] = $options['driving_license'];
    }

    public function finishView(FormView $view, FormInterface $form, array $options)
    {
        $drivingLicense = $form->getData()?->getDrivingLicense();

        $view->children['distanceTraveled']->vars['hidden'] = !$drivingLicense;
        $view->children['activeDriver']->vars['hidden'] = !$drivingLicense;
    }

    /**
     * {@inheritdoc}
     */
    public function configureOptions(OptionsResolver $resolver)
    {
        parent::configureOptions($resolver);
        $resolver->setDefaults([
            'data_class' => EuropeanCVDrivingLicense::class,
        ]);

        $resolver->setRequired([
            'driving_license',
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function getBlockPrefix(): string
    {
        return 'european_cv_driving_license';
    }
}